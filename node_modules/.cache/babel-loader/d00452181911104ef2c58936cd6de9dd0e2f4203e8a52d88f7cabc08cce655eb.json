{"ast":null,"code":"var _jsxFileName = \"/home/atharva/Documents/projects/dappazon/src/components/transaction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transaction = _ref => {\n  _s();\n  let {\n    account\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const txns = await provider.getHistory(account);\n        setTransactions(txns);\n      } catch (error) {\n        console.error('Error fetching transaction history:', error);\n      }\n    };\n    if (account) {\n      fetchTransactions();\n    }\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transaction History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map((txn, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: txn.hash\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(Transaction, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n_c = Transaction;\nexport default Transaction;\nvar _c;\n$RefreshReg$(_c, \"Transaction\");","map":{"version":3,"names":["React","useState","useEffect","ethers","Transaction","account","transactions","setTransactions","fetchTransactions","provider","providers","Web3Provider","window","ethereum","txns","getHistory","error","console","map","txn","index","hash"],"sources":["/home/atharva/Documents/projects/dappazon/src/components/transaction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nconst Transaction = ({ account }) => {\n    const [transactions, setTransactions] = useState([]);\n\n    useEffect(() => {\n        const fetchTransactions = async () => {\n            try {\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const txns = await provider.getHistory(account);\n                setTransactions(txns);\n            } catch (error) {\n                console.error('Error fetching transaction history:', error);\n            }\n        };\n\n        if (account) {\n            fetchTransactions();\n        }\n    }, [account]);\n\n    return (\n        <div>\n            <h2>Transaction History</h2>\n            <ul>\n                {transactions.map((txn, index) => (\n                    <li key={index}>{txn.hash}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Transaction;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAEhC,MAAMC,WAAW,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAC5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACZ,MAAMM,iBAAiB,GAAG,YAAY;MAClC,IAAI;QACA,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;QACnE,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,UAAU,CAACV,OAAO,CAAC;QAC/CE,eAAe,CAACO,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC/D;IACJ,CAAC;IAED,IAAIX,OAAO,EAAE;MACTG,iBAAiB,EAAE;IACvB;EACJ,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;EAEb,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA4B,eAC5B;MAAA,UACKC,YAAY,CAACY,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACzB;QAAA,UAAiBD,GAAG,CAACE;MAAI,GAAhBD,KAAK;QAAA;QAAA;QAAA;MAAA,QACjB;IAAC;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd,CAAC;AAAC,GA7BIhB,WAAW;AAAA,KAAXA,WAAW;AA+BjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}